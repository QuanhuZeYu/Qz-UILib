/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
ext {
    useMoreMod = project.hasProperty('useMoreMod') ? project.property("useMoreMod") : false
    lwjglVersion = "3.3.3"

    natives = "natives-windows"
}

dependencies {
    implementation('org.joml:joml:1.10.8')
    implementation("io.github.humbleui:skija-shared:0.116.4")
    implementation "io.github.humbleui:skija-windows-x64:0.116.4"
    implementation "io.github.humbleui:skija-macos-arm64:0.116.4"
    implementation "io.github.humbleui:skija-macos-x64:0.116.4"
    implementation "io.github.humbleui:skija-linux-x64:0.116.4"
//    implementation('org.lwjgl:lwjgl:3.3.3')
//    implementation('org.lwjgl:lwjgl-stb:3.3.3')
//    runtimeOnly('org.lwjgl:lwjgl:3.3.3:natives-windows')
//    runtimeOnly('org.lwjgl:lwjgl-stb:3.3.3:natives-windows')

//    implementation "org.lwjgl:lwjgl:${lwjglVersion}"
//    implementation "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
//    implementation "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
//    implementation "org.lwjgl:lwjgl-stb:${lwjglVersion}"
//    implementation "org.lwjgl:lwjgl-assimp:${lwjglVersion}"

//    runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:${natives}"
//    runtimeOnly "org.lwjgl:lwjgl-opengl:${lwjglVersion}:${natives}"
//    runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${natives}"
//    runtimeOnly "org.lwjgl:lwjgl-stb:${lwjglVersion}:${natives}"
//    runtimeOnly "org.lwjgl:lwjgl-assimp:${lwjglVersion}:${natives}"


    implementation("com.github.GTNewHorizons:GT5-Unofficial:5.09.51.162:dev")

//    implementation("net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev")
//    implementation("com.github.GTNewHorizons:waila:1.8.2:dev")
//    implementation("com.github.GTNewHorizons:Mantle:0.4.2:dev")
//    implementation("curse.maven:cofh-core-69162:2388751")
//    implementation("com.github.GTNewHorizons:TinkersConstruct:1.12.16-GTNH:dev")
//    implementation("com.github.GTNewHorizons:StructureLib:1.3.6:dev")
//    implementation("com.github.GTNewHorizons:GTNHLib:0.5.21:dev")
//    implementation("com.github.GTNewHorizons:Hodgepodge:2.5.82:dev")
//    implementation("com.github.GTNewHorizons:ModularUI:1.2.17:dev")
//    implementation("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-beta-478-GTNH:dev")
    // modularUI2
    // GT NEI Ore Plugin
    // YAMCore
    // TecTech
    // BartWorks
    // KekzTech
    // Good Generator
    // GTNH: Lanthanides
    // gtpp
    // GT Scanner
    // KubaTech
    // Galactic Greg
    // Postea
    // AE2Wireless
    // Baubles
    implementation("com.github.GTNewHorizons:LootGames:2.1.4:dev")
    implementation("com.github.GTNewHorizons:EnderIO:2.8.24:dev")
    implementation("com.github.GTNewHorizons:Angelica:1.0.0-beta35:dev")



    // For testing iApiary
    //runtimeOnlyNonPublishable("com.github.GTNewHorizons:ForestryMC:4.8.9:dev")

    testImplementation(platform('org.junit:junit-bom:5.9.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.mockito:mockito-core:3.+")

//    functionalTestImplementation(platform('org.junit:junit-bom:5.9.2'))
//    functionalTestImplementation('org.junit.jupiter:junit-jupiter')
//    functionalTestImplementation('org.junit.platform:junit-platform-engine')
//    functionalTestImplementation('org.junit.platform:junit-platform-launcher')
//    functionalTestImplementation('org.junit.platform:junit-platform-reporting')

    runtimeOnlyNonPublishable("com.github.GTNewHorizons:DuraDisplay:1.2.3:dev")
}

if(useMoreMod) {
    dependencies {
        runtimeOnly("com.github.GTNewHorizons:waila:1.8.2:dev")
        runtimeOnly("com.github.GTNewHorizons:InGame-Info-XML:2.8.19:dev")
        runtimeOnly('com.github.GTNewHorizons:ServerUtilities:2.0.92:dev')
        runtimeOnly("com.github.GTNewHorizons:Battlegear2:1.4.2:dev")
        runtimeOnly("com.github.GTNewHorizons:Tinkers-Defense:1.2.2:dev")
        runtimeOnly("com.github.GTNewHorizons:TinkersGregworks:GTNH-1.0.30-pre:dev")
        runtimeOnly("com.github.GTNewHorizons:IguanaTweaksTConstruct:2.5.0:dev")
//        runtimeOnly("com.github.GTNewHorizons:Railcraft:9.15.16:dev")
//        runtimeOnly("com.github.GTNewHorizons:NotEnoughCharacters:1.7.10-1.5.3-GTNH:dev")
//        runtimeOnly("com.github.GTNewHorizons:NotEnoughItems:2.7.29-GTNH:dev")
//        runtimeOnly("com.github.GTNewHorizons:Avaritia:1.58:dev")
//        runtimeOnly("com.github.GTNewHorizons:Galacticraft:3.2.9-GTNH:dev")
//        runtimeOnly("com.github.GTNewHorizons:ModularUI:1.2.18:dev")
//        runtimeOnly("com.github.GTNewHorizons:ModularUI2:2.2.4-1.7.10:dev")
    }
}
