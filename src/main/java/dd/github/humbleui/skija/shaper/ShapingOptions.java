// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija.shaper;

import io.github.humbleui.skija.FontFeature;
import io.github.humbleui.skija.FontMgr;
import org.jetbrains.annotations.*;

public class ShapingOptions {
    public static final ShapingOptions DEFAULT = new ShapingOptions(null, null, true, true, true);
    @ApiStatus.Internal
    @Nullable
    public final FontMgr _fontMgr;
    @ApiStatus.Internal
    @Nullable
    public final FontFeature[] _features;
    @ApiStatus.Internal
    public final boolean _leftToRight;
    /**
     * If enabled, fallback font runs will not be broken by whitespace from original
     * font
     */
    @ApiStatus.Internal
    public final boolean _approximateSpaces;
    /**
     * If enabled, fallback font runs will not be broken by punctuation from
     * original font
     */
    @ApiStatus.Internal
    public final boolean _approximatePunctuation;

    @NotNull
    public ShapingOptions withFeatures(@Nullable FontFeature[] features) {
        return new ShapingOptions(_fontMgr, features, _leftToRight, _approximateSpaces, _approximatePunctuation);
    }

    @NotNull
    public ShapingOptions withFeatures(@Nullable String featuresString) {
        return featuresString == null ? withFeatures((FontFeature[]) null)
                : withFeatures(FontFeature.parse(featuresString));
    }

    @SuppressWarnings("all")
    public ShapingOptions(@Nullable final FontMgr fontMgr, @Nullable final FontFeature[] features,
            final boolean leftToRight, final boolean approximateSpaces, final boolean approximatePunctuation) {
        this._fontMgr = fontMgr;
        this._features = features;
        this._leftToRight = leftToRight;
        this._approximateSpaces = approximateSpaces;
        this._approximatePunctuation = approximatePunctuation;
    }

    @Nullable
    @SuppressWarnings("all")
    public FontMgr getFontMgr() {
        return this._fontMgr;
    }

    @Nullable
    @SuppressWarnings("all")
    public FontFeature[] getFeatures() {
        return this._features;
    }

    @SuppressWarnings("all")
    public boolean isLeftToRight() {
        return this._leftToRight;
    }

    /**
     * If enabled, fallback font runs will not be broken by whitespace from original
     * font
     */
    @SuppressWarnings("all")
    public boolean isApproximateSpaces() {
        return this._approximateSpaces;
    }

    /**
     * If enabled, fallback font runs will not be broken by punctuation from
     * original font
     */
    @SuppressWarnings("all")
    public boolean isApproximatePunctuation() {
        return this._approximatePunctuation;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof ShapingOptions))
            return false;
        final ShapingOptions other = (ShapingOptions) o;
        if (!other.canEqual((Object) this))
            return false;
        if (this.isLeftToRight() != other.isLeftToRight())
            return false;
        if (this.isApproximateSpaces() != other.isApproximateSpaces())
            return false;
        if (this.isApproximatePunctuation() != other.isApproximatePunctuation())
            return false;
        final Object this$_fontMgr = this.getFontMgr();
        final Object other$_fontMgr = other.getFontMgr();
        if (this$_fontMgr == null ? other$_fontMgr != null : !this$_fontMgr.equals(other$_fontMgr))
            return false;
        if (!java.util.Arrays.deepEquals(this.getFeatures(), other.getFeatures()))
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof ShapingOptions;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + (this.isLeftToRight() ? 79 : 97);
        result = result * PRIME + (this.isApproximateSpaces() ? 79 : 97);
        result = result * PRIME + (this.isApproximatePunctuation() ? 79 : 97);
        final Object $_fontMgr = this.getFontMgr();
        result = result * PRIME + ($_fontMgr == null ? 43 : $_fontMgr.hashCode());
        result = result * PRIME + java.util.Arrays.deepHashCode(this.getFeatures());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "ShapingOptions(_fontMgr=" + this.getFontMgr() + ", _features="
                + java.util.Arrays.deepToString(this.getFeatures()) + ", _leftToRight=" + this.isLeftToRight()
                + ", _approximateSpaces=" + this.isApproximateSpaces() + ", _approximatePunctuation="
                + this.isApproximatePunctuation() + ")";
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ShapingOptions withFontMgr(@Nullable final FontMgr _fontMgr) {
        return this._fontMgr == _fontMgr ? this
                : new ShapingOptions(_fontMgr, this._features, this._leftToRight, this._approximateSpaces,
                        this._approximatePunctuation);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ShapingOptions withLeftToRight(final boolean _leftToRight) {
        return this._leftToRight == _leftToRight ? this
                : new ShapingOptions(this._fontMgr, this._features, _leftToRight, this._approximateSpaces,
                        this._approximatePunctuation);
    }

    /**
     * If enabled, fallback font runs will not be broken by whitespace from original
     * font
     *
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ShapingOptions withApproximateSpaces(final boolean _approximateSpaces) {
        return this._approximateSpaces == _approximateSpaces ? this
                : new ShapingOptions(this._fontMgr, this._features, this._leftToRight, _approximateSpaces,
                        this._approximatePunctuation);
    }

    /**
     * If enabled, fallback font runs will not be broken by punctuation from
     * original font
     *
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ShapingOptions withApproximatePunctuation(final boolean _approximatePunctuation) {
        return this._approximatePunctuation == _approximatePunctuation ? this
                : new ShapingOptions(this._fontMgr, this._features, this._leftToRight, this._approximateSpaces,
                        _approximatePunctuation);
    }
}
