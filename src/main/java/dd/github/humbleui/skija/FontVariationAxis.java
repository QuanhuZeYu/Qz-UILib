// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija;

import org.jetbrains.annotations.*;

public class FontVariationAxis {
    @ApiStatus.Internal
    public final int _tag;
    @ApiStatus.Internal
    public final float _minValue;
    @ApiStatus.Internal
    public final float _defaultValue;
    @ApiStatus.Internal
    public final float _maxValue;
    @ApiStatus.Internal
    public final boolean _hidden;

    public String getTag() {
        return FourByteTag.toString(_tag);
    }

    public FontVariationAxis(String tag, float min, float def, float max, boolean hidden) {
        this(FourByteTag.fromString(tag), min, def, max, hidden);
    }

    public FontVariationAxis(String tag, float min, float def, float max) {
        this(FourByteTag.fromString(tag), min, def, max, false);
    }

    @SuppressWarnings("all")
    public float getMinValue() {
        return this._minValue;
    }

    @SuppressWarnings("all")
    public float getDefaultValue() {
        return this._defaultValue;
    }

    @SuppressWarnings("all")
    public float getMaxValue() {
        return this._maxValue;
    }

    @SuppressWarnings("all")
    public boolean isHidden() {
        return this._hidden;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof FontVariationAxis))
            return false;
        final FontVariationAxis other = (FontVariationAxis) o;
        if (!other.canEqual((Object) this))
            return false;
        final Object this$_tag = this.getTag();
        final Object other$_tag = other.getTag();
        if (this$_tag == null ? other$_tag != null : !this$_tag.equals(other$_tag))
            return false;
        if (Float.compare(this.getMinValue(), other.getMinValue()) != 0)
            return false;
        if (Float.compare(this.getDefaultValue(), other.getDefaultValue()) != 0)
            return false;
        if (Float.compare(this.getMaxValue(), other.getMaxValue()) != 0)
            return false;
        if (this.isHidden() != other.isHidden())
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof FontVariationAxis;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $_tag = this.getTag();
        result = result * PRIME + ($_tag == null ? 43 : $_tag.hashCode());
        result = result * PRIME + Float.floatToIntBits(this.getMinValue());
        result = result * PRIME + Float.floatToIntBits(this.getDefaultValue());
        result = result * PRIME + Float.floatToIntBits(this.getMaxValue());
        result = result * PRIME + (this.isHidden() ? 79 : 97);
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "FontVariationAxis(_tag=" + this.getTag() + ", _minValue=" + this.getMinValue() + ", _defaultValue="
                + this.getDefaultValue() + ", _maxValue=" + this.getMaxValue() + ", _hidden=" + this.isHidden() + ")";
    }

    @SuppressWarnings("all")
    public FontVariationAxis(final int tag, final float minValue, final float defaultValue, final float maxValue,
            final boolean hidden) {
        this._tag = tag;
        this._minValue = minValue;
        this._defaultValue = defaultValue;
        this._maxValue = maxValue;
        this._hidden = hidden;
    }
}
