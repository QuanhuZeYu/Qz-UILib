// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * <p>
 * Describes pixel and encoding. ImageInfo can be created from ColorInfo by
 * providing dimensions.
 * </p>
 *
 * <p>
 * It encodes how pixel bits describe alpha, transparency; color components red,
 * blue,
 * and green; and ColorSpace, the range and linearity of colors.
 * </p>
 */
public class ColorInfo {
    @NotNull
    public final ColorType _colorType;
    @NotNull
    public final ColorAlphaType _alphaType;
    @Nullable
    public final ColorSpace _colorSpace;
    /**
     * Creates an ColorInfo with {@link ColorType#UNKNOWN},
     * {@link ColorAlphaType#UNKNOWN},
     * and no ColorSpace.
     */
    public static final ColorInfo DEFAULT = new ColorInfo(ColorType.UNKNOWN, ColorAlphaType.UNKNOWN, null);

    public boolean isOpaque() {
        return _alphaType == ColorAlphaType.OPAQUE || _colorType.isAlwaysOpaque();
    }

    /**
     * Returns number of bytes per pixel required by ColorType.
     * Returns zero if getColorType() is {@link ColorType#UNKNOWN}.
     *
     * @return bytes in pixel
     *
     * @see <a href=
     *      "https://fiddle.skia.org/c/@ImageInfo_bytesPerPixel">https://fiddle.skia.org/c/@ImageInfo_bytesPerPixel</a>
     */
    public int getBytesPerPixel() {
        return _colorType.getBytesPerPixel();
    }

    /**
     * Returns bit shift converting row bytes to row pixels.
     * Returns zero for {@link ColorType#UNKNOWN}.
     *
     * @return one of: 0, 1, 2, 3, 4; left shift to convert pixels to bytes
     *
     * @see <a href=
     *      "https://fiddle.skia.org/c/@ImageInfo_shiftPerPixel">https://fiddle.skia.org/c/@ImageInfo_shiftPerPixel</a>
     */
    public int getShiftPerPixel() {
        return _colorType.getShiftPerPixel();
    }

    public boolean isGammaCloseToSRGB() {
        return _colorSpace != null && _colorSpace.isGammaCloseToSRGB();
    }

    @SuppressWarnings("all")
    public ColorInfo(@NotNull final ColorType colorType, @NotNull final ColorAlphaType alphaType,
            @Nullable final ColorSpace colorSpace) {
        if (colorType == null) {
            throw new NullPointerException("colorType is marked non-null but is null");
        }
        if (alphaType == null) {
            throw new NullPointerException("alphaType is marked non-null but is null");
        }
        this._colorType = colorType;
        this._alphaType = alphaType;
        this._colorSpace = colorSpace;
    }

    @NotNull
    @SuppressWarnings("all")
    public ColorType getColorType() {
        return this._colorType;
    }

    @NotNull
    @SuppressWarnings("all")
    public ColorAlphaType getAlphaType() {
        return this._alphaType;
    }

    @Nullable
    @SuppressWarnings("all")
    public ColorSpace getColorSpace() {
        return this._colorSpace;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof ColorInfo))
            return false;
        final ColorInfo other = (ColorInfo) o;
        if (!other.canEqual((Object) this))
            return false;
        final Object this$_colorType = this.getColorType();
        final Object other$_colorType = other.getColorType();
        if (this$_colorType == null ? other$_colorType != null : !this$_colorType.equals(other$_colorType))
            return false;
        final Object this$_alphaType = this.getAlphaType();
        final Object other$_alphaType = other.getAlphaType();
        if (this$_alphaType == null ? other$_alphaType != null : !this$_alphaType.equals(other$_alphaType))
            return false;
        final Object this$_colorSpace = this.getColorSpace();
        final Object other$_colorSpace = other.getColorSpace();
        if (this$_colorSpace == null ? other$_colorSpace != null : !this$_colorSpace.equals(other$_colorSpace))
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof ColorInfo;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $_colorType = this.getColorType();
        result = result * PRIME + ($_colorType == null ? 43 : $_colorType.hashCode());
        final Object $_alphaType = this.getAlphaType();
        result = result * PRIME + ($_alphaType == null ? 43 : $_alphaType.hashCode());
        final Object $_colorSpace = this.getColorSpace();
        result = result * PRIME + ($_colorSpace == null ? 43 : $_colorSpace.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "ColorInfo(_colorType=" + this.getColorType() + ", _alphaType=" + this.getAlphaType() + ", _colorSpace="
                + this.getColorSpace() + ")";
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ColorInfo withColorType(@NotNull final ColorType _colorType) {
        if (_colorType == null) {
            throw new NullPointerException("_colorType is marked non-null but is null");
        }
        return this._colorType == _colorType ? this : new ColorInfo(_colorType, this._alphaType, this._colorSpace);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ColorInfo withAlphaType(@NotNull final ColorAlphaType _alphaType) {
        if (_alphaType == null) {
            throw new NullPointerException("_alphaType is marked non-null but is null");
        }
        return this._alphaType == _alphaType ? this : new ColorInfo(this._colorType, _alphaType, this._colorSpace);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ColorInfo withColorSpace(@Nullable final ColorSpace _colorSpace) {
        return this._colorSpace == _colorSpace ? this : new ColorInfo(this._colorType, this._alphaType, _colorSpace);
    }
}
