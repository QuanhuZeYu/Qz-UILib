// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija.svg;

import io.github.humbleui.types.Point;
import io.github.humbleui.types.Rect;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;

public class SVGLengthContext {
    @ApiStatus.Internal
    public final float _width;
    @ApiStatus.Internal
    public final float _height;
    @ApiStatus.Internal
    public final float _dpi;

    public SVGLengthContext(float width, float height) {
        this(width, height, 90);
    }

    public SVGLengthContext(@NotNull Point size) {
        this(size._x, size._y, 90);
    }

    public float resolve(@NotNull SVGLength length, @NotNull SVGLengthType type) {
        switch (length._unit) {
            case NUMBER:
                return length._value;
            case PX:
                return length._value;
            case PERCENTAGE:
                switch (type) {
                    case HORIZONTAL:
                        return length._value * _width / 100.0F;
                    case VERTICAL:
                        return length._value * _height / 100.0F;
                    case OTHER:
                        // https://www.w3.org/TR/SVG11/coords.html#Units_viewport_percentage
                        return (float) (length._value * Math.hypot(_width, _height) / Math.sqrt(2.0) / 100.0);
                }
            case CM:
                return length._value * _dpi / 2.54F;
            case MM:
                return length._value * _dpi / 25.4F;
            case IN:
                return length._value * _dpi;
            case PT:
                return length._value * _dpi / 72.272F;
            case PC:
                return length._value * _dpi * 12.0F / 72.272F;
            default:
                throw new IllegalArgumentException("Unknown SVGLengthUnit: " + length._unit);
        }
    }

    @NotNull
    public Rect resolveRect(@NotNull SVGLength x, @NotNull SVGLength y, @NotNull SVGLength width,
            @NotNull SVGLength height) {
        return Rect.makeXYWH(resolve(x, SVGLengthType.HORIZONTAL), resolve(y, SVGLengthType.VERTICAL),
                resolve(width, SVGLengthType.HORIZONTAL), resolve(height, SVGLengthType.VERTICAL));
    }

    @SuppressWarnings("all")
    public SVGLengthContext(final float width, final float height, final float dpi) {
        this._width = width;
        this._height = height;
        this._dpi = dpi;
    }

    @SuppressWarnings("all")
    public float getWidth() {
        return this._width;
    }

    @SuppressWarnings("all")
    public float getHeight() {
        return this._height;
    }

    @SuppressWarnings("all")
    public float getDpi() {
        return this._dpi;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof SVGLengthContext))
            return false;
        final SVGLengthContext other = (SVGLengthContext) o;
        if (!other.canEqual((Object) this))
            return false;
        if (Float.compare(this.getWidth(), other.getWidth()) != 0)
            return false;
        if (Float.compare(this.getHeight(), other.getHeight()) != 0)
            return false;
        if (Float.compare(this.getDpi(), other.getDpi()) != 0)
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof SVGLengthContext;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + Float.floatToIntBits(this.getWidth());
        result = result * PRIME + Float.floatToIntBits(this.getHeight());
        result = result * PRIME + Float.floatToIntBits(this.getDpi());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "SVGLengthContext(_width=" + this.getWidth() + ", _height=" + this.getHeight() + ", _dpi="
                + this.getDpi() + ")";
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public SVGLengthContext withWidth(final float _width) {
        return this._width == _width ? this : new SVGLengthContext(_width, this._height, this._dpi);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public SVGLengthContext withHeight(final float _height) {
        return this._height == _height ? this : new SVGLengthContext(this._width, _height, this._dpi);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public SVGLengthContext withDpi(final float _dpi) {
        return this._dpi == _dpi ? this : new SVGLengthContext(this._width, this._height, _dpi);
    }
}
