// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija;

import org.jetbrains.annotations.ApiStatus;

/**
 * <p>
 * A compressed form of a rotation+scale matrix.
 * </p>
 *
 * <pre>
 * [ fSCos     -fSSin    fTx ]
 *  [ fSSin      fSCos    fTy ]
 *  [     0          0      1 ]
 * </pre>
 */
public class RSXform {
    @ApiStatus.Internal
    public final float _scos;
    @ApiStatus.Internal
    public final float _ssin;
    @ApiStatus.Internal
    public final float _tx;
    @ApiStatus.Internal
    public final float _ty;

    /**
     * Initialize a new xform based on the scale, rotation (in radians), final tx,ty
     * location
     * and anchor-point ax,ay within the src quad.
     *
     * Note: the anchor point is not normalized (e.g. 0...1) but is in pixels of the
     * src image.
     */
    public static RSXform makeFromRadians(float scale, float radians, float tx, float ty, float ax, float ay) {
        float s = (float) Math.sin(radians) * scale;
        float c = (float) Math.cos(radians) * scale;
        return new RSXform(c, s, tx + -c * ax + s * ay, ty + -s * ax - c * ay);
    }

    @SuppressWarnings("all")
    public RSXform(final float scos, final float ssin, final float tx, final float ty) {
        this._scos = scos;
        this._ssin = ssin;
        this._tx = tx;
        this._ty = ty;
    }

    @SuppressWarnings("all")
    public float getScos() {
        return this._scos;
    }

    @SuppressWarnings("all")
    public float getSsin() {
        return this._ssin;
    }

    @SuppressWarnings("all")
    public float getTx() {
        return this._tx;
    }

    @SuppressWarnings("all")
    public float getTy() {
        return this._ty;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof RSXform))
            return false;
        final RSXform other = (RSXform) o;
        if (!other.canEqual((Object) this))
            return false;
        if (Float.compare(this.getScos(), other.getScos()) != 0)
            return false;
        if (Float.compare(this.getSsin(), other.getSsin()) != 0)
            return false;
        if (Float.compare(this.getTx(), other.getTx()) != 0)
            return false;
        if (Float.compare(this.getTy(), other.getTy()) != 0)
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof RSXform;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + Float.floatToIntBits(this.getScos());
        result = result * PRIME + Float.floatToIntBits(this.getSsin());
        result = result * PRIME + Float.floatToIntBits(this.getTx());
        result = result * PRIME + Float.floatToIntBits(this.getTy());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "RSXform(_scos=" + this.getScos() + ", _ssin=" + this.getSsin() + ", _tx=" + this.getTx() + ", _ty="
                + this.getTy() + ")";
    }
}
