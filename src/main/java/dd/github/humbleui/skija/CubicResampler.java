// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija;

import org.jetbrains.annotations.*;

/**
 * <p>
 * Specify B and C (each between 0...1) to create a shader that applies the
 * corresponding
 * cubic reconstruction filter to the image.
 * </p>
 *
 * <p>
 * Example values:
 * </p>
 * <dl>
 * <dt>B = 1/3, C = 1/3</dt>
 * <dd>"Mitchell" filter</dd>
 * <dt>B = 0, C = 1/2</dt>
 * <dd>"Catmull-Rom" filter</dd>
 * </dl>
 *
 * <p>
 * See
 * </p>
 * <ul>
 * <li>"Reconstruction Filters in Computer Graphics" Don P. Mitchell, Arun N.
 * Netravali, 1988
 * <a href=
 * "https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf">https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf</a></li>
 * <li>Desmos worksheet <a href=
 * "https://www.desmos.com/calculator/aghdpicrvr">https://www.desmos.com/calculator/aghdpicrvr</a></li>
 * <li>Nice overview <a href=
 * "https://entropymine.com/imageworsener/bicubic/">https://entropymine.com/imageworsener/bicubic/</a></li>
 * </ul>
 */
public class CubicResampler implements SamplingMode {
    @ApiStatus.Internal
    public final float _B;
    @ApiStatus.Internal
    public final float _C;

    @ApiStatus.Internal
    @Override
    public long _pack() {
        return -9223372036854775808L
                | (4611686018427387903L & (((long) Float.floatToIntBits(_B) << 32) | (long) Float.floatToIntBits(_C)));
    }

    @SuppressWarnings("all")
    public CubicResampler(final float b, final float c) {
        this._B = b;
        this._C = c;
    }

    @SuppressWarnings("all")
    public float getB() {
        return this._B;
    }

    @SuppressWarnings("all")
    public float getC() {
        return this._C;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof CubicResampler))
            return false;
        final CubicResampler other = (CubicResampler) o;
        if (!other.canEqual((Object) this))
            return false;
        if (Float.compare(this.getB(), other.getB()) != 0)
            return false;
        if (Float.compare(this.getC(), other.getC()) != 0)
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof CubicResampler;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + Float.floatToIntBits(this.getB());
        result = result * PRIME + Float.floatToIntBits(this.getC());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "CubicResampler(_B=" + this.getB() + ", _C=" + this.getC() + ")";
    }
}
