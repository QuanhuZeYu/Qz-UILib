// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija;

public class Color4f {
    public final float _r;
    public final float _g;
    public final float _b;
    public final float _a;

    public Color4f(float r, float g, float b) {
        this(r, g, b, 1.0F);
    }

    public Color4f(float[] rgba) {
        this(rgba[0], rgba[1], rgba[2], rgba[3]);
    }

    public Color4f(int c) {
        this((c >> 16 & 255) / 255.0F, (c >> 8 & 255) / 255.0F, (c & 255) / 255.0F, (c >> 24 & 255) / 255.0F);
    }

    public int toColor() {
        return ((Math.round(_a * 255.0F)) << 24) | ((Math.round(_r * 255.0F)) << 16) | ((Math.round(_g * 255.0F)) << 8)
                | (Math.round(_b * 255.0F));
    }

    public float[] flatten() {
        return new float[] { _r, _g, _b, _a };
    }

    public static float[] flattenArray(Color4f[] colors) {
        float[] arr = new float[colors.length * 4];
        for (int i = 0; i < colors.length; ++i) {
            arr[i * 4] = colors[i]._r;
            arr[i * 4 + 1] = colors[i]._g;
            arr[i * 4 + 2] = colors[i]._b;
            arr[i * 4 + 3] = colors[i]._a;
        }
        return arr;
    }

    // TODO premultiply alpha
    public Color4f makeLerp(Color4f other, float weight) {
        return new Color4f(_r + (other._r - _r) * weight, _g + (other._g - _g) * weight, _b + (other._b - _b) * weight,
                _a + (other._a - _a) * weight);
    }

    @SuppressWarnings("all")
    public Color4f(final float r, final float g, final float b, final float a) {
        this._r = r;
        this._g = g;
        this._b = b;
        this._a = a;
    }

    @SuppressWarnings("all")
    public float getR() {
        return this._r;
    }

    @SuppressWarnings("all")
    public float getG() {
        return this._g;
    }

    @SuppressWarnings("all")
    public float getB() {
        return this._b;
    }

    @SuppressWarnings("all")
    public float getA() {
        return this._a;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Color4f))
            return false;
        final Color4f other = (Color4f) o;
        if (!other.canEqual((Object) this))
            return false;
        if (Float.compare(this.getR(), other.getR()) != 0)
            return false;
        if (Float.compare(this.getG(), other.getG()) != 0)
            return false;
        if (Float.compare(this.getB(), other.getB()) != 0)
            return false;
        if (Float.compare(this.getA(), other.getA()) != 0)
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof Color4f;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + Float.floatToIntBits(this.getR());
        result = result * PRIME + Float.floatToIntBits(this.getG());
        result = result * PRIME + Float.floatToIntBits(this.getB());
        result = result * PRIME + Float.floatToIntBits(this.getA());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Color4f(_r=" + this.getR() + ", _g=" + this.getG() + ", _b=" + this.getB() + ", _a=" + this.getA()
                + ")";
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public Color4f withR(final float _r) {
        return this._r == _r ? this : new Color4f(_r, this._g, this._b, this._a);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public Color4f withG(final float _g) {
        return this._g == _g ? this : new Color4f(this._r, _g, this._b, this._a);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public Color4f withB(final float _b) {
        return this._b == _b ? this : new Color4f(this._r, this._g, _b, this._a);
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public Color4f withA(final float _a) {
        return this._a == _a ? this : new Color4f(this._r, this._g, this._b, _a);
    }
}
