// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija;

public class FontExtents {
    public final float _ascender;
    public final float _descender;
    public final float _lineGap;

    public float getAscenderAbs() {
        return Math.abs(_ascender);
    }

    public float getLineHeight() {
        return -_ascender + _descender + _lineGap;
    }

    @SuppressWarnings("all")
    public FontExtents(final float ascender, final float descender, final float lineGap) {
        this._ascender = ascender;
        this._descender = descender;
        this._lineGap = lineGap;
    }

    @SuppressWarnings("all")
    public float getAscender() {
        return this._ascender;
    }

    @SuppressWarnings("all")
    public float getDescender() {
        return this._descender;
    }

    @SuppressWarnings("all")
    public float getLineGap() {
        return this._lineGap;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof FontExtents))
            return false;
        final FontExtents other = (FontExtents) o;
        if (!other.canEqual((Object) this))
            return false;
        if (Float.compare(this.getAscender(), other.getAscender()) != 0)
            return false;
        if (Float.compare(this.getDescender(), other.getDescender()) != 0)
            return false;
        if (Float.compare(this.getLineGap(), other.getLineGap()) != 0)
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof FontExtents;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + Float.floatToIntBits(this.getAscender());
        result = result * PRIME + Float.floatToIntBits(this.getDescender());
        result = result * PRIME + Float.floatToIntBits(this.getLineGap());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "FontExtents(_ascender=" + this.getAscender() + ", _descender=" + this.getDescender() + ", _lineGap="
                + this.getLineGap() + ")";
    }
}
