// Generated by delombok at Thu Feb 13 14:20:21 UTC 2025
package io.github.humbleui.skija;

import org.jetbrains.annotations.ApiStatus;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FontVariation {
    public static final FontVariation[] EMPTY = new FontVariation[0];
    public final int _tag;
    public final float _value;

    public FontVariation(String feature, float value) {
        this(FourByteTag.fromString(feature), value);
    }

    public String getTag() {
        return FourByteTag.toString(_tag);
    }

    public String toString() {
        return getTag() + "=" + _value;
    }

    @ApiStatus.Internal
    public static final Pattern _splitPattern = Pattern.compile("\\s+");
    @ApiStatus.Internal
    public static final Pattern _variationPattern = Pattern.compile("(?<tag>[a-z0-9]{4})=(?<value>\\d+)");

    public static FontVariation parseOne(String s) {
        Matcher m = _variationPattern.matcher(s);
        if (!m.matches())
            throw new IllegalArgumentException("Canâ€™t parse FontVariation: " + s);
        float value = Float.parseFloat(m.group("value"));
        return new FontVariation(m.group("tag"), value);
    }

    public static FontVariation[] parse(String s) {
        return _splitPattern.splitAsStream(s).map(FontVariation::parseOne).toArray(FontVariation[]::new);
    }

    @SuppressWarnings("all")
    public FontVariation(final int tag, final float value) {
        this._tag = tag;
        this._value = value;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof FontVariation))
            return false;
        final FontVariation other = (FontVariation) o;
        if (!other.canEqual((Object) this))
            return false;
        final Object this$_tag = this.getTag();
        final Object other$_tag = other.getTag();
        if (this$_tag == null ? other$_tag != null : !this$_tag.equals(other$_tag))
            return false;
        if (Float.compare(this.getValue(), other.getValue()) != 0)
            return false;
        return true;
    }

    @SuppressWarnings("all")
    protected boolean canEqual(final Object other) {
        return other instanceof FontVariation;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $_tag = this.getTag();
        result = result * PRIME + ($_tag == null ? 43 : $_tag.hashCode());
        result = result * PRIME + Float.floatToIntBits(this.getValue());
        return result;
    }

    @SuppressWarnings("all")
    public float getValue() {
        return this._value;
    }
}
